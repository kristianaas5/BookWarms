@page "/books/edit/{id:int?}"
@using System.ComponentModel.DataAnnotations
@using BookWarms.web.Services
@inject BooksApiClient Api
@inject NavigationManager Nav

<PageTitle>@(Model.Id == 0 ? "Add Book" : $"Edit Book #{Model.Id}")</PageTitle>
<h3>@(Model.Id == 0 ? "Add Book" : $"Edit Book #{Model.Id}")</h3>

@if (!string.IsNullOrWhiteSpace(error))
{
    <div class="alert alert-danger">@error</div>
}

<EditForm Model="@Model" OnValidSubmit="@SaveAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="edit-book-form">
        <div class="row align-items-start row-field">
            <label for="title" class="col-sm-3 col-form-label">Title</label>
            <div class="col-sm-9">
                <InputText id="title" class="form-control" @bind-Value="Model.Title" />
                <ValidationMessage For="()=>Model.Title" />
            </div>
        </div>

        <div class="row align-items-start row-field">
            <label for="author" class="col-sm-3 col-form-label">Author</label>
            <div class="col-sm-9">
                <InputText id="author" class="form-control" @bind-Value="Model.Author" />
                <ValidationMessage For="()=>Model.Author" />
            </div>
        </div>

        <div class="row align-items-start row-field">
            <label for="genre" class="col-sm-3 col-form-label">Genre</label>
            <div class="col-sm-9">
                <InputText id="genre" class="form-control" @bind-Value="Model.Genre" />
            </div>
        </div>

        <div class="row align-items-start row-field">
            <label for="description" class="col-sm-3 col-form-label">Description</label>
            <div class="col-sm-9">
                <InputTextArea id="description" class="form-control" rows="5" @bind-Value="Model.Description" />
            </div>
        </div>

        <div class="row align-items-start row-field">
            <label for="pages" class="col-sm-3 col-form-label">Page Count</label>
            <div class="col-sm-9">
                <InputNumber id="pages" class="form-control" @bind-Value="Model.PageCount" />
                <ValidationMessage For="()=>Model.PageCount" />
            </div>
        </div>

        <div class="row">
            <div class="col-sm-9 offset-sm-3 d-flex gap-2">
                <button type="submit" class="btn btn-primary" disabled="@saving">
                    <span class="bi bi-save me-1"></span>Save
                </button>
                <button type="button" class="btn btn-secondary" @onclick="@(()=>Nav.NavigateTo("/books"))">
                    Cancel
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public int? Id { get; set; }
    private string? error;
    private bool saving;

    private BookFormModel Model { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (Id is { } id && id > 0)
        {
            var dto = await Api.GetBookAsync(id);
            if (dto is null) { error = "Book not found."; return; }
            Model = new BookFormModel
            {
                Id = dto.Id,
                Title = dto.Title,
                Author = dto.Author,
                Genre = dto.Genre,
                Description = dto.Description,
                PageCount = dto.PageCount
            };
        }
    }

    private async Task SaveAsync()
    {
        error = null;
        saving = true;
        try
        {
            var dto = new BookDto(
                Model.Id,
                Model.Title,
                Model.Author,
                Model.Genre ?? string.Empty,
                Model.Description ?? string.Empty,
                Model.PageCount,
                false
            );

            bool ok;
            if (Model.Id == 0)
            {
                var (result, errorMsg) = await Api.AddBookAsync(dto);
                ok = result is not null;
                if (!ok) error = errorMsg;
            }
            else
            {
                ok = await Api.UpdateBookAsync(dto);
            }

            if (ok) Nav.NavigateTo("/books");
            else error = "Save failed.";
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            saving = false;
        }
    }

    public sealed class BookFormModel
    {
        public int Id { get; set; }

        [Required, StringLength(200)]
        public string Title { get; set; } = string.Empty;

        [Required, StringLength(200)]
        public string Author { get; set; } = string.Empty;

        [StringLength(100)]
        public string? Genre { get; set; }

        [StringLength(2000)]
        public string? Description { get; set; }

        [Range(1, int.MaxValue, ErrorMessage = "Page count must be at least 1.")]
        public int PageCount { get; set; } = 1;
    }
}