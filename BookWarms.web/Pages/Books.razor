@page "/books"
@using BookWarms.web.Services
@inject BooksApiClient Api
@inject NavigationManager Nav

<div class="d-flex align-items-center gap-2 mb-2">
    <h1 class="mb-0">Books</h1>
</div>

<div class="d-flex align-items-center gap-2 my-3 flex-nowrap">
    <div class="search-bar flex-grow-1">
        <span class="search-icon bi bi-search" aria-hidden="true"></span>
        <input class="form-control search-input" placeholder="Search books..."
               value="@searchTerm" @oninput="DebouncedSearch" />
        @if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            <button type="button" class="clear-btn" title="Clear" @onclick="ClearSearch">
                <span class="bi bi-x-circle-fill" aria-hidden="true"></span>
                <span class="visually-hidden">Clear search</span>
            </button>
        }
    </div>
</div>

<div class="d-flex justify-content-end mb-3">
    <button class="btn btn-primary btn-lg btn-icon" title="Add book" @onclick='() => Nav.NavigateTo("/books/edit")'>
        <span class="bi bi-plus-circle" aria-hidden="true"></span>
        <span class="visually-hidden">Add</span>
    </button>
</div>

@if (!string.IsNullOrWhiteSpace(error))
{
    <div class="alert alert-danger">@error</div>
}
else if (loading)
{
    <div class="placeholder-glow">
        <div class="placeholder col-12 mb-2" style="height:2rem"></div>
        <div class="placeholder col-12 mb-2" style="height:2rem"></div>
        <div class="placeholder col-12 mb-2" style="height:2rem"></div>
    </div>
}
else if (items.Count == 0)
{
    <p>No books found.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover align-middle">
            <thead>
                <tr>
                    @Header("Title", "Title")
                    @Header("Author", "Author")
                    @Header("Genre", "Genre")
                    @Header("Pages", "PageCount")
                </tr>
            </thead>
            <tbody>
                @foreach (var b in items)
                {
                    <tr>
                        <td>
                            <NavLink class="text-decoration-none book-title-link" href="@($"/books/{b.Id}")">@b.Title</NavLink>
                        </td>
                        <td>@b.Author</td>
                        <td>@b.Genre</td>
                        <td>@b.PageCount</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="d-flex align-items-center justify-content-between mt-2">
        <span class="text-muted">Total: @items.Count</span>
    </div>
}

@code {
    private string? error;
    private bool loading;
    private string searchTerm = string.Empty;
    private string sortBy = "Title";
    private bool desc = false;

    private List<BookDto> all = new();
    private List<BookDto> items = new();
    private CancellationTokenSource? _cts;

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync()
    {
        loading = true;
        error = null;
        try
        {
            var data = await Api.GetBooksAsync();
            all = data.Where(b => !b.IsDeleted).ToList();
            ApplyFilterAndSort();
        }
        catch (Exception ex)
        {
            error = $"Failed to load books: {ex.Message}";
            items = new();
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private void ApplyFilterAndSort()
    {
        IEnumerable<BookDto> q = all;

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var t = searchTerm.Trim();
            q = q.Where(b =>
                (!string.IsNullOrEmpty(b.Title) && b.Title.Contains(t, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(b.Author) && b.Author.Contains(t, StringComparison.OrdinalIgnoreCase)) ||
                (!string.IsNullOrEmpty(b.Genre) && b.Genre.Contains(t, StringComparison.OrdinalIgnoreCase)));
        }

        q = sortBy switch
        {
            "Author" => desc ? q.OrderByDescending(x => x.Author) : q.OrderBy(x => x.Author),
            "Genre" => desc ? q.OrderByDescending(x => x.Genre) : q.OrderBy(x => x.Genre),
            "PageCount" => desc ? q.OrderByDescending(x => x.PageCount) : q.OrderBy(x => x.PageCount),
            _ => desc ? q.OrderByDescending(x => x.Title) : q.OrderBy(x => x.Title)
        };

        items = q.ToList();
    }

    private RenderFragment Header(string caption, string key) => builder =>
    {
        var icon = sortBy == key ? (desc ? "bi-caret-down-fill" : "bi-caret-up-fill") : "bi-arrow-down-up";
        builder.OpenElement(0, "th");
        builder.AddContent(1,
            (RenderFragment)(bld =>
            {
                bld.OpenElement(0, "button");
                bld.AddAttribute(1, "class", "btn btn-link p-0 text-decoration-none");
                bld.AddAttribute(2, "onclick", EventCallback.Factory.Create(this, () => SortBy(key)));
                bld.AddContent(3, caption + " ");
                bld.OpenElement(4, "span");
                bld.AddAttribute(5, "class", $"bi {icon}");
                bld.CloseElement();
                bld.CloseElement();
            })
        );
        builder.CloseElement();
    };

    private async Task DebouncedSearch(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        _cts?.Cancel();
        _cts = new CancellationTokenSource();
        var token = _cts.Token;
        try
        {
            await Task.Delay(300, token);
            if (!token.IsCancellationRequested)
            {
                ApplyFilterAndSort();
                StateHasChanged();
            }
        }
        catch (TaskCanceledException) { }
    }

    private async Task ClearSearch()
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return;
        searchTerm = string.Empty;
        ApplyFilterAndSort();
        await Task.CompletedTask;
    }

    private async Task SortBy(string key)
    {
        if (sortBy == key) desc = !desc;
        else { sortBy = key; desc = false; }
        ApplyFilterAndSort();
        await Task.CompletedTask;
    }
}