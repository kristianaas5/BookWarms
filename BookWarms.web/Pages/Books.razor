@page "/books"
@using BookWarms.web.Services
@inject BooksApiClient Api
@inject NavigationManager Nav

<h1>Books</h1>

<div class="d-flex align-items-center gap-2 my-3">
    <div class="search-bar flex-grow-1">
        <span class="search-icon bi bi-search" aria-hidden="true"></span>
        <input class="form-control search-input" placeholder="Search books..."
               value="@searchTerm" @oninput="DebouncedSearch" />
        @if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            <button type="button" class="clear-btn" title="Clear" @onclick="ClearSearch">
                <span class="bi bi-x-circle-fill" aria-hidden="true"></span>
                <span class="visually-hidden">Clear search</span>
            </button>
        }
    </div>
    <button class="btn btn-primary" @onclick="@(() => Nav.NavigateTo("/books/edit"))">
        <span class="bi bi-plus-circle me-1"></span>Add
    </button>
</div>

@if (!string.IsNullOrWhiteSpace(error))
{
    <div class="alert alert-danger">@error</div>
}
else if (loading)
{
    <div class="placeholder-glow">
        <div class="placeholder col-12 mb-2" style="height:2rem"></div>
        <div class="placeholder col-12 mb-2" style="height:2rem"></div>
        <div class="placeholder col-12 mb-2" style="height:2rem"></div>
    </div>
}
else if (items.Count == 0)
{
    <p>No books found.</p>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover align-middle">
            <thead>
                <tr>
                    @Header("Title", "Title")
                    @Header("Author", "Author")
                    @Header("Genre", "Genre")
                    @Header("Pages", "PageCount")
                    <th style="width:140px;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var b in items)
                {
                    <tr>
                        <td>@b.Title</td>
                        <td>@b.Author</td>
                        <td>@b.Genre</td>
                        <td>@b.PageCount</td>
                        <td>
                            <button class="btn btn-sm btn-outline-secondary me-1" title="Edit"
                                    @onclick="@(() => Nav.NavigateTo($"/books/edit/{b.Id}"))">
                                <span class="bi bi-pencil-square"></span>
                                <span class="visually-hidden">Edit</span>
                            </button>
                            <button class="btn btn-sm btn-outline-danger" title="Delete"
                                    @onclick="@(() => ConfirmDelete(b.Id))">
                                <span class="bi bi-trash"></span>
                                <span class="visually-hidden">Delete</span>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="d-flex align-items-center justify-content-between mt-2">
        <div>
            <select class="form-select form-select-sm d-inline w-auto" @onchange="ChangePageSize">
                <option value="10" selected="@(@pageSize==10)">10</option>
                <option value="25" selected="@(@pageSize==25)">25</option>
                <option value="50" selected="@(@pageSize==50)">50</option>
            </select>
            <span class="ms-2 text-muted">Total: @totalCount</span>
        </div>
        <nav>
            <ul class="pagination pagination-sm mb-0">
                <li class="page-item @(page<=1 ? "disabled" : null)">
                    <button class="page-link" @onclick="@(()=>GoTo(page-1))">Prev</button>
                </li>
                <li class="page-item disabled">
                    <span class="page-link">Page <Component /></span>
                </li>
                <li class="page-item @((page*pageSize>=totalCount) ? "disabled" : null)">
                    <button class="page-link" @onclick="@(()=>GoTo(page+1))">Next</button>
                </li>
            </ul>
        </nav>
    </div>
}

@code {
    private string? error;
    private bool loading;
    private string searchTerm = string.Empty;
    private string sortBy = "Title";
    private bool desc = false;
    private int page = 1;
    private int pageSize = 10;
    private int totalCount = 0;
    private List<BookDto> items = new();
    private CancellationTokenSource? _cts;

    protected override async Task OnInitializedAsync() => await LoadAsync();

    private async Task LoadAsync()
    {
        loading = true;
        error = null;
        try
        {
            var result = await Api.SearchBooksAsync(searchTerm, sortBy, desc, page, pageSize);
            items = result.Items.Where(b => !b.IsDeleted).ToList();
            totalCount = result.TotalCount;
        }
        catch (Exception ex)
        {
            error = $"Failed to load books: {ex.Message}";
            items = new();
            totalCount = 0;
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    private RenderFragment Header(string caption, string key) => builder =>
    {
        var icon = sortBy == key ? (desc ? "bi-caret-down-fill" : "bi-caret-up-fill") : "bi-arrow-down-up";
        builder.OpenElement(0, "th");
        builder.AddContent(1,
            (RenderFragment)(bld =>
            {
                bld.OpenElement(0, "button");
                bld.AddAttribute(1, "class", "btn btn-link p-0 text-decoration-none");
                bld.AddAttribute(2, "onclick", EventCallback.Factory.Create(this, () => SortBy(key)));
                bld.AddContent(3, caption + " ");
                bld.OpenElement(4, "span");
                bld.AddAttribute(5, "class", $"bi {icon}");
                bld.CloseElement();
                bld.CloseElement();
            })
        );
        builder.CloseElement();
    };

    private async Task DebouncedSearch(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        _cts?.Cancel();
        _cts = new CancellationTokenSource();
        var token = _cts.Token;
        try
        {
            await Task.Delay(300, token);
            if (!token.IsCancellationRequested)
            {
                page = 1;
                await LoadAsync();
            }
        }
        catch (TaskCanceledException) { }
    }

    private async Task ClearSearch()
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return;
        searchTerm = string.Empty;
        page = 1;
        await LoadAsync();
    }

    private async Task SortBy(string key)
    {
        if (sortBy == key) desc = !desc;
        else { sortBy = key; desc = false; }
        page = 1;
        await LoadAsync();
    }

    private async Task ChangePageSize(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var size) && size > 0)
        {
            pageSize = size;
            page = 1;
            await LoadAsync();
        }
    }

    private async Task GoTo(int p)
    {
        if (p < 1) return;
        if ((p - 1) * pageSize >= totalCount) return;
        page = p;
        await LoadAsync();
    }

    private async Task ConfirmDelete(int id)
    {
        if (!await jsConfirm($"Delete book #{id}?")) return;
        var ok = await Api.DeleteBookAsync(id);
        if (ok) await LoadAsync();
    }

    // minimal JS confirm without importing JS: fallback to window.confirm via IJSRuntime
    [Inject] private Microsoft.JSInterop.IJSRuntime JS { get; set; } = default!;
    private ValueTask<bool> jsConfirm(string message) => JS.InvokeAsync<bool>("confirm", message);
}