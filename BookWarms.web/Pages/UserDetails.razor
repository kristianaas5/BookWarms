@page "/users/{id:int}/details"
@using BookWarms.web.Services
@inject UsersApiClient UsersApi
@inject BooksApiClient BooksApi
@inject NavigationManager Nav

<h1>User</h1>

@if (!string.IsNullOrWhiteSpace(error))
{
    <div class="alert alert-danger">@error</div>
}
else if (loading)
{
    <p>Loading...</p>
}
else if (user is null)
{
    <p>User not found.</p>
}
else
{
    <div class="mb-3">
        <h4 class="mb-1">@user.Username</h4>
        <div class="text-muted">@user.Email</div>
    </div>

    <!-- Add to library UI remains -->

    <h5>Library</h5>
    @if (library.Count == 0)
    {
        <p class="text-muted">No library items.</p>
    }
    else
    {
        <ul class="list-group">
            @foreach (var item in library.Where(i => i.Book is not null))
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@item.Book!.Title</strong> by @item.Book!.Author
                        <div class="text-muted small">@item.ShelfType</div>
                    </div>
                    <div class="d-flex gap-2">
                        <select class="form-select form-select-sm w-auto" value="@item.ShelfType"
                                @onchange="e => ChangeShelf(item, Enum.Parse<ShelfType>(e.Value?.ToString() ?? nameof(ShelfType.WantToRead)))">
                            @foreach (var s in Enum.GetValues<ShelfType>())
                            {
                                <option value="@s" selected="@(s==item.ShelfType)">@s</option>
                            }
                        </select>
                        <button class="btn btn-sm btn-outline-danger" title="Remove"
                                @onclick="@(()=>Remove(item))">
                            <span class="bi bi-x-circle"></span>
                        </button>
                    </div>
                </li>
            }
        </ul>
    }

    <h5 class="mt-4">Reviews</h5>
    @if (reviews.Count == 0)
    {
        <p class="text-muted">No reviews.</p>
    }
    else
    {
        <ul class="list-group">
            @foreach (var r in reviews.Where(r => r.Library?.Book is not null))
            {
                <li class="list-group-item">
                    <div><strong>@r.Library!.Book!.Title</strong> - Rating: @r.Rating/5</div>
                    <div class="text-muted">@r.Date.ToShortDateString()</div>
                    <div>@r.ReviewText</div>
                </li>
            }
        </ul>
    }

    <div class="mt-3">
        <button class="btn btn-secondary" @onclick="@(()=>Nav.NavigateTo("/users"))">Back to Users</button>
    </div>
}

@code {
    [Parameter] public int id { get; set; }
    private string? error;
    private string? actionError;
    private bool loading = true;
    private bool adding = false;
    private UserDto? user;
    private List<LibraryDto> library = new();
    private List<BookDto> books = new();
    private List<ReviewDto> reviews = new();
    private int selectedBookId = 0;
    private ShelfType selectedShelf = ShelfType.WantToRead;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            user = await UsersApi.GetUserAsync(id);
            if (user is null) { error = "User not found."; return; }

            var lib = await UsersApi.GetUserLibraryAsync(id);
            library = lib.Where(l => !l.IsDeleted && l.Book is not null).ToList();

            reviews = (await UsersApi.GetUserReviewsAsync(id))
                .Where(r => r.Library?.Book is not null)
                .ToList();

            books = (await BooksApi.GetBooksAsync())
                .Where(b => !b.IsDeleted)
                .OrderBy(b => b.Title)
                .ToList();
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            loading = false;
        }
    }

    private async Task AddToLibrary() { /* existing code unchanged */ }
    private async Task ChangeShelf(LibraryDto item, ShelfType newShelf) { /* unchanged */ }
    private async Task Remove(LibraryDto item) { /* unchanged */ }
}